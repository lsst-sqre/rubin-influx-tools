{
	"meta": {
		"chronografVersion": "1.9.4",
		"sources": {
			"1": {
				"name": "InfluxDB",
				"link": "/chronograf/v1/sources/1"
			}
		}
	},
	"dashboard": {
		"id": "2",
		"cells": [
			{
				"i": "7bc417ff-4894-4b7e-8294-4a932e91b5c4",
				"x": 0,
				"y": 12,
				"w": 12,
				"h": 4,
				"name": "Pod CPU vs limits",
				"queries": [
					{
						"query": "t1 = from(bucket: v.databases)\n   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n   |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n   |> filter(fn: (r) => r[\"_field\"] == \"resource_limits_millicpu_units\")\n   |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n   |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n   |> last()\n   |> findRecord(idx:0, fn: (key) => key._field == \"resource_limits_millicpu_units\")\n\nfrom(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_nanocores\")\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  //|> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> map(fn: (r) => ({r with fc: (float(v: r.cpu_usage_nanocores) / 1000000.0) }))\n  |> map(fn: (r) => ({r with fl: float(v: t1._value)}))\n  |> map(fn: (r) => ({r with _value: float(v: 100.0 * (float(v: r.fc)/float(v: r.fl)))})) \n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  ",
						"queryConfig": {
							"database": "",
							"measurement": "",
							"retentionPolicy": "",
							"fields": [],
							"tags": {},
							"groupBy": {
								"time": "",
								"tags": []
							},
							"areTagsAccepted": false,
							"rawText": "t1 = from(bucket: v.databases)\n   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n   |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n   |> filter(fn: (r) => r[\"_field\"] == \"resource_limits_millicpu_units\")\n   |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n   |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n   |> last()\n   |> findRecord(idx:0, fn: (key) => key._field == \"resource_limits_millicpu_units\")\n\nfrom(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_nanocores\")\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  //|> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> map(fn: (r) => ({r with fc: (float(v: r.cpu_usage_nanocores) / 1000000.0) }))\n  |> map(fn: (r) => ({r with fl: float(v: t1._value)}))\n  |> map(fn: (r) => ({r with _value: float(v: 100.0 * (float(v: r.fc)/float(v: r.fl)))})) \n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  ",
							"range": null,
							"shifts": null
						},
						"source": "",
						"type": "flux"
					}
				],
				"axes": {
					"x": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y": {
						"bounds": [
							"0",
							""
						],
						"label": "% CPU limit used",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y2": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					}
				},
				"type": "line",
				"colors": [
					{
						"id": "c462e965-e8a8-4dc9-97e9-be9fd60ff370",
						"type": "scale",
						"hex": "#31C0F6",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "18eb010b-a851-47e8-be6e-4a1da3dbe864",
						"type": "scale",
						"hex": "#A500A5",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "626c319f-7154-4eb5-aae1-882a088ab819",
						"type": "scale",
						"hex": "#FF7E27",
						"name": "Nineteen Eighty Four",
						"value": "0"
					}
				],
				"legend": {},
				"tableOptions": {
					"verticalTimeAxis": true,
					"sortBy": {
						"internalName": "time",
						"displayName": "",
						"visible": true
					},
					"wrapping": "truncate",
					"fixFirstColumn": true
				},
				"fieldOptions": [
					{
						"internalName": "time",
						"displayName": "",
						"visible": true
					}
				],
				"timeFormat": "MM/DD/YYYY HH:mm:ss",
				"decimalPlaces": {
					"isEnforced": true,
					"digits": 2
				},
				"note": "",
				"noteVisibility": "default",
				"links": {
					"self": "/chronograf/v1/dashboards/2/cells/7bc417ff-4894-4b7e-8294-4a932e91b5c4"
				}
			},
			{
				"i": "be8896a2-84f2-4436-986c-c85e00ed0a73",
				"x": 0,
				"y": 4,
				"w": 12,
				"h": 4,
				"name": "Pod memory vs limits",
				"queries": [
					{
						"query": "t1 = from(bucket: v.databases)\n   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n   |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n   |> filter(fn: (r) => r[\"_field\"] == \"resource_limits_memory_bytes\")\n   |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n   |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n   |> last()\n   |> findRecord(idx:0, fn: (key) => key._field == \"resource_limits_memory_bytes\")\n\nfrom(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_usage_bytes\")\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  //|> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> map(fn: (r) => ({r with fb: float(v: r.memory_usage_bytes)}))\n  |> map(fn: (r) => ({r with fl: float(v: t1._value)}))\n  |> map(fn: (r) => ({r with _value: float(v: 100.0 * (float(v: r.fb)/float(v: r.fl)))})) \n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  ",
						"queryConfig": {
							"database": "",
							"measurement": "",
							"retentionPolicy": "",
							"fields": [],
							"tags": {},
							"groupBy": {
								"time": "",
								"tags": []
							},
							"areTagsAccepted": false,
							"rawText": "t1 = from(bucket: v.databases)\n   |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n   |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n   |> filter(fn: (r) => r[\"_field\"] == \"resource_limits_memory_bytes\")\n   |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n   |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n   |> last()\n   |> findRecord(idx:0, fn: (key) => key._field == \"resource_limits_memory_bytes\")\n\nfrom(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_usage_bytes\")\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> drop(columns: [\"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  //|> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> map(fn: (r) => ({r with fb: float(v: r.memory_usage_bytes)}))\n  |> map(fn: (r) => ({r with fl: float(v: t1._value)}))\n  |> map(fn: (r) => ({r with _value: float(v: 100.0 * (float(v: r.fb)/float(v: r.fl)))})) \n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n  ",
							"range": null,
							"shifts": null
						},
						"source": "",
						"type": "flux"
					}
				],
				"axes": {
					"x": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y": {
						"bounds": [
							"0",
							""
						],
						"label": "% memory limit used",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y2": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					}
				},
				"type": "line",
				"colors": [
					{
						"id": "c462e965-e8a8-4dc9-97e9-be9fd60ff370",
						"type": "scale",
						"hex": "#31C0F6",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "18eb010b-a851-47e8-be6e-4a1da3dbe864",
						"type": "scale",
						"hex": "#A500A5",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "626c319f-7154-4eb5-aae1-882a088ab819",
						"type": "scale",
						"hex": "#FF7E27",
						"name": "Nineteen Eighty Four",
						"value": "0"
					}
				],
				"legend": {},
				"tableOptions": {
					"verticalTimeAxis": true,
					"sortBy": {
						"internalName": "time",
						"displayName": "",
						"visible": true
					},
					"wrapping": "truncate",
					"fixFirstColumn": true
				},
				"fieldOptions": [
					{
						"internalName": "time",
						"displayName": "",
						"visible": true
					}
				],
				"timeFormat": "MM/DD/YYYY HH:mm:ss",
				"decimalPlaces": {
					"isEnforced": true,
					"digits": 2
				},
				"note": "",
				"noteVisibility": "default",
				"links": {
					"self": "/chronograf/v1/dashboards/2/cells/be8896a2-84f2-4436-986c-c85e00ed0a73"
				}
			},
			{
				"i": "3d14931f-ab5b-4e2b-8d4b-5b1211bc44ea",
				"x": 0,
				"y": 8,
				"w": 12,
				"h": 4,
				"name": "Pod CPU",
				"queries": [
					{
						"query": "from(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_nanocores\")\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000000000.0}))\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
						"queryConfig": {
							"database": "",
							"measurement": "",
							"retentionPolicy": "",
							"fields": [],
							"tags": {},
							"groupBy": {
								"time": "",
								"tags": []
							},
							"areTagsAccepted": false,
							"rawText": "from(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"cpu_usage_nanocores\")\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1000000000.0}))\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
							"range": null,
							"shifts": null
						},
						"source": "",
						"type": "flux"
					}
				],
				"axes": {
					"x": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y": {
						"bounds": [
							"0",
							""
						],
						"label": "cores",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y2": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					}
				},
				"type": "line",
				"colors": [
					{
						"id": "c462e965-e8a8-4dc9-97e9-be9fd60ff370",
						"type": "scale",
						"hex": "#31C0F6",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "18eb010b-a851-47e8-be6e-4a1da3dbe864",
						"type": "scale",
						"hex": "#A500A5",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "626c319f-7154-4eb5-aae1-882a088ab819",
						"type": "scale",
						"hex": "#FF7E27",
						"name": "Nineteen Eighty Four",
						"value": "0"
					}
				],
				"legend": {},
				"tableOptions": {
					"verticalTimeAxis": true,
					"sortBy": {
						"internalName": "time",
						"displayName": "",
						"visible": true
					},
					"wrapping": "truncate",
					"fixFirstColumn": true
				},
				"fieldOptions": [
					{
						"internalName": "time",
						"displayName": "",
						"visible": true
					}
				],
				"timeFormat": "MM/DD/YYYY HH:mm:ss",
				"decimalPlaces": {
					"isEnforced": true,
					"digits": 2
				},
				"note": "",
				"noteVisibility": "default",
				"links": {
					"self": "/chronograf/v1/dashboards/2/cells/3d14931f-ab5b-4e2b-8d4b-5b1211bc44ea"
				}
			},
			{
				"i": "361adc43-5d4d-4ae9-b4e5-88f693bf70c3",
				"x": 0,
				"y": 0,
				"w": 12,
				"h": 4,
				"name": "Pod memory",
				"queries": [
					{
						"query": "from(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_usage_bytes\")\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
						"queryConfig": {
							"database": "",
							"measurement": "",
							"retentionPolicy": "",
							"fields": [],
							"tags": {},
							"groupBy": {
								"time": "",
								"tags": []
							},
							"areTagsAccepted": false,
							"rawText": "from(bucket: v.databases)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"cluster\"] == v.cluster)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"kubernetes_pod_container\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_usage_bytes\")\n  |> drop(columns: [\"_measurement\", \"_field\", \"_start\", \"_stop\", \"host\", \"node_name\", \"namespace\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")",
							"range": null,
							"shifts": null
						},
						"source": "",
						"type": "flux"
					}
				],
				"axes": {
					"x": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y": {
						"bounds": [
							"0",
							""
						],
						"label": "bytes",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					},
					"y2": {
						"bounds": [
							"",
							""
						],
						"label": "",
						"prefix": "",
						"suffix": "",
						"base": "10",
						"scale": "linear"
					}
				},
				"type": "line",
				"colors": [
					{
						"id": "c462e965-e8a8-4dc9-97e9-be9fd60ff370",
						"type": "scale",
						"hex": "#31C0F6",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "18eb010b-a851-47e8-be6e-4a1da3dbe864",
						"type": "scale",
						"hex": "#A500A5",
						"name": "Nineteen Eighty Four",
						"value": "0"
					},
					{
						"id": "626c319f-7154-4eb5-aae1-882a088ab819",
						"type": "scale",
						"hex": "#FF7E27",
						"name": "Nineteen Eighty Four",
						"value": "0"
					}
				],
				"legend": {},
				"tableOptions": {
					"verticalTimeAxis": true,
					"sortBy": {
						"internalName": "time",
						"displayName": "",
						"visible": true
					},
					"wrapping": "truncate",
					"fixFirstColumn": true
				},
				"fieldOptions": [
					{
						"internalName": "time",
						"displayName": "",
						"visible": true
					}
				],
				"timeFormat": "MM/DD/YYYY HH:mm:ss",
				"decimalPlaces": {
					"isEnforced": true,
					"digits": 2
				},
				"note": "",
				"noteVisibility": "default",
				"links": {
					"self": "/chronograf/v1/dashboards/2/cells/361adc43-5d4d-4ae9-b4e5-88f693bf70c3"
				}
			}
		],
		"templates": [
			{
				"tempVar": ":databases:",
				"values": [
					{
						"value": "_monitoring",
						"type": "database",
						"selected": true
					}
				],
				"id": "119fdc6c-9009-4062-93ec-1435483ad53d",
				"type": "databases",
				"label": "",
				"query": {
					"influxql": "SHOW DATABASES",
					"measurement": "",
					"tagKey": "",
					"fieldKey": ""
				},
				"sourceID": "dynamic",
				"links": {
					"self": "/chronograf/v1/dashboards/2/templates/119fdc6c-9009-4062-93ec-1435483ad53d"
				}
			},
			{
				"tempVar": ":cluster:",
				"values": [
					{
						"value": "base-lsp.lsst.codes",
						"type": "tagValue",
						"selected": true
					}
				],
				"id": "71fb0551-da46-4cd6-809e-3629ffb8c588",
				"type": "tagValues",
				"label": "",
				"query": {
					"influxql": "SHOW TAG VALUES ON :database: FROM :measurement: WITH KEY=:tagKey:",
					"db": "argocd",
					"measurement": "kubernetes_pod_container",
					"tagKey": "cluster",
					"fieldKey": ""
				},
				"sourceID": "1",
				"links": {
					"self": "/chronograf/v1/dashboards/2/templates/71fb0551-da46-4cd6-809e-3629ffb8c588"
				}
			}
		],
		"name": "K8s Applications",
		"organization": "default",
		"links": {
			"self": "/chronograf/v1/dashboards/2",
			"cells": "/chronograf/v1/dashboards/2/cells",
			"templates": "/chronograf/v1/dashboards/2/templates"
		}
	}
}